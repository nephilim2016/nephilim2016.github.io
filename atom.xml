<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zues GPR</title>
  
  <subtitle>Ground Penetrating Radar Data Processing and Imaging Algorithms</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-05T02:46:06.396Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zeus GPR</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GPR File Formats, Part 3 (IMPULSE)</title>
    <link href="http://example.com/2024/01/05/IMPULSE/"/>
    <id>http://example.com/2024/01/05/IMPULSE/</id>
    <published>2024-01-05T17:00:00.000Z</published>
    <updated>2024-01-05T02:46:06.396Z</updated>
    
    <content type="html"><![CDATA[<p>Stay tuned! We have some exciting developments in the pipeline that we can’t wait to share with you. Coming soon…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Stay tuned! We have some exciting developments in the pipeline that we can’t wait to share with you. Coming soon…&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="GPR Data" scheme="http://example.com/tags/GPR-Data/"/>
    
  </entry>
  
  <entry>
    <title>GPR File Formats, Part 2 (MALA)</title>
    <link href="http://example.com/2024/01/04/MALA/"/>
    <id>http://example.com/2024/01/04/MALA/</id>
    <published>2024-01-04T17:00:00.000Z</published>
    <updated>2024-01-05T02:41:05.069Z</updated>
    
    <content type="html"><![CDATA[<p>Stay tuned! We have some exciting developments in the pipeline that we can’t wait to share with you. Coming soon…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Stay tuned! We have some exciting developments in the pipeline that we can’t wait to share with you. Coming soon…&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="GPR Data" scheme="http://example.com/tags/GPR-Data/"/>
    
  </entry>
  
  <entry>
    <title>GPR File Formats, Part 1 (GSSI)</title>
    <link href="http://example.com/2024/01/03/GSSI/"/>
    <id>http://example.com/2024/01/03/GSSI/</id>
    <published>2024-01-03T17:00:00.000Z</published>
    <updated>2024-01-05T02:36:44.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Understanding-GPR-File-Formats-Part-1-A-Comprehensive-Guide-to-GSSI-Data-Reading-and-Writing-Methods"><a href="#Understanding-GPR-File-Formats-Part-1-A-Comprehensive-Guide-to-GSSI-Data-Reading-and-Writing-Methods" class="headerlink" title="Understanding GPR File Formats, Part 1: A Comprehensive Guide to GSSI Data Reading and Writing Methods"></a>Understanding GPR File Formats, Part 1: A Comprehensive Guide to GSSI Data Reading and Writing Methods</h1><p><a href="https://www.linkedin.com/company/geophysical-survey-systems-inc.">Geophysical Survey Systems, Inc. (GSSI)</a> is a world leader in the development, manufacture, and sale of ground penetrating radar (GPR) equipment, primarily used for geophysical, geological, environmental, and forensic investigations. GSSI’s GPR systems are well-regarded for their versatility, reliability, and accuracy in subsurface probing and mapping.</p><h2 id="GSSI-File-Format"><a href="#GSSI-File-Format" class="headerlink" title="GSSI File Format"></a>GSSI File Format</h2><p>The primary file format used by GSSI for GPR data is the DZT file format. Key characteristics of this format include:</p><ul><li>Proprietary Nature: The DZT format is specific to GSSI and is designed to work seamlessly with their software and hardware.</li><li>Header Information: Each file includes a header with metadata, such as survey parameters, date, time, and geographic information.</li><li>Data Composition: A DZT file typically contains raw radar data, including the amplitude of the returned signal, which reflects subsurface structures.</li><li>Compatibility: To read or analyze DZT files, users generally rely on GSSI’s RADAN software or other specialized GPR data processing software capable of interpreting the DZT format.</li></ul><h2 id="Data-Reading-and-Writing"><a href="#Data-Reading-and-Writing" class="headerlink" title="Data Reading and Writing"></a>Data Reading and Writing</h2><p>In this discussion, we primarily concentrate on the methodologies for reading and writing DZT files, without delving into the details of DZX files.</p><h3 id="Data-Reading"><a href="#Data-Reading" class="headerlink" title="Data Reading"></a>Data Reading</h3><p>DZT data files are comprised of two key components: Header Information and Data Composition. The format of the Header Information is detailed in the following <a href="#table1">Table 1</a>.</p><div align="center">Table 1: Data Type Specifications</div><table><thead><tr><th style="text-align:left">Data Types</th><th style="text-align:left">Parameters</th><th style="text-align:center">Discription</th><th style="text-align:center">File Object Start Position</th><th style="text-align:center">Standard Size</th></tr></thead><tbody><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_tag</td><td style="text-align:center">-</td><td style="text-align:center">00</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_data</td><td style="text-align:center">offset to data</td><td style="text-align:center">02</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_nsamp</td><td style="text-align:center">samples per scan</td><td style="text-align:center">04</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_bits</td><td style="text-align:center">bits per data word</td><td style="text-align:center">06</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_zero</td><td style="text-align:center">-</td><td style="text-align:center">08</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_sps</td><td style="text-align:center">scans per second</td><td style="text-align:center">10</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_spm</td><td style="text-align:center">scans per meter</td><td style="text-align:center">14</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_mpm</td><td style="text-align:center">-</td><td style="text-align:center">18</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_position</td><td style="text-align:center">starting point position (ns)</td><td style="text-align:center">22</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_range</td><td style="text-align:center">time duration (ns)</td><td style="text-align:center">26</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_npass</td><td style="text-align:center">-</td><td style="text-align:center">30</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_create</td><td style="text-align:center">date created</td><td style="text-align:center">32</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_modif</td><td style="text-align:center">date modified</td><td style="text-align:center">36</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_rgain</td><td style="text-align:center">-</td><td style="text-align:center">40</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_nrgain</td><td style="text-align:center">number of points in gain function</td><td style="text-align:center">42</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_text</td><td style="text-align:center">-</td><td style="text-align:center">44</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_ntext</td><td style="text-align:center">-</td><td style="text-align:center">46</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_proc</td><td style="text-align:center">-</td><td style="text-align:center">48</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_nproc</td><td style="text-align:center">-</td><td style="text-align:center">50</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_nchan</td><td style="text-align:center">number of channels</td><td style="text-align:center">52</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_epsr</td><td style="text-align:center">relative permittivity</td><td style="text-align:center">54</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_top</td><td style="text-align:center">starting point position (m)</td><td style="text-align:center">58</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>float</code></td><td style="text-align:left">rh_depth</td><td style="text-align:center">measured depth</td><td style="text-align:center">62</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_reserved</td><td style="text-align:center">-</td><td style="text-align:center">66</td><td style="text-align:center">18</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_spp</td><td style="text-align:center">-</td><td style="text-align:center">84</td><td style="text-align:center">02</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_linemun</td><td style="text-align:center">-</td><td style="text-align:center">86</td><td style="text-align:center">02</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_start_x</td><td style="text-align:center">-</td><td style="text-align:center">88</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_start_y</td><td style="text-align:center">-</td><td style="text-align:center">90</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_end_x</td><td style="text-align:center">-</td><td style="text-align:center">92</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_end_y</td><td style="text-align:center">-</td><td style="text-align:center">94</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>char</code></td><td style="text-align:left">rh_lineorder</td><td style="text-align:center">-</td><td style="text-align:center">96</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left"><code>char</code></td><td style="text-align:left">rh_dtype</td><td style="text-align:center">-</td><td style="text-align:center">97</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_antname</td><td style="text-align:center">antenna name</td><td style="text-align:center">98</td><td style="text-align:center">14</td></tr><tr><td style="text-align:left"><code>unsigned short</code></td><td style="text-align:left">rh_chanmask</td><td style="text-align:center">-</td><td style="text-align:center">112</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_name</td><td style="text-align:center">-</td><td style="text-align:center">114</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left"><code>short</code></td><td style="text-align:left">rh_chksum</td><td style="text-align:center">check placeholder</td><td style="text-align:center">126</td><td style="text-align:center">2</td></tr><tr><td style="text-align:left"><code>char[]</code></td><td style="text-align:left">rh_variable</td><td style="text-align:center">variables</td><td style="text-align:center">128</td><td style="text-align:center">896</td></tr></tbody></table><p>In the ensuing discussion, we explore the data composition. Our initial step involves bypassing the offset, followed by reading the data in accordance with the data type specified by the ‘info[‘rh_bits’]’ value, as detailed in the Header Information. The data is then transformed into a two-dimensional array, aligned with the ‘info[‘rh_nsamp’]’ value, also mentioned in the Header Information. A crucial aspect to highlight is that the first row of this 2D data delineates the trace indices, while the second row is characterized by uniform values, as depicted in <a href="#figure1">Figure 1</a>. Consequently, to ensure a precise analysis, it is imperative to remove these initial two rows from the 2D data.</p><figure id="figure1"><br>  <img src="/Figure/Part1Fig/Fig1.png" width="600" height="auto" alt="About" style="display:block; margin:auto;" /><br>  <figcaption style="text-align:center;">Figure 1: Visualization of the 2D Data Readed Using Python Code</figcaption><br></figure><p>Finally, as depicted in <a href="#figure2">Figure 2</a>, we successfully read the complete data. Following this, we delve into the specifics of data:</p><ul><li>The spatial distance covered by the data can be calculated using data.shape[1]/float(info[‘rh_spm’]), which applies to the distance survey method.</li><li>Alternatively, for the time survey method, the distance is determined by data.shape[1] / float(info[‘rh_sps’]).</li><li>The time duration represented in the data is directly obtained from info[‘rh_range’].</li><li>Similarly, the depth of the data is directly indicated by info[‘rh_depth’].</li><li>Additionally, the relationship between the time duration and depth can be expressed through the next equation, providing a crucial link between these two key parameters.<br>$$\mathrm{1.5e^8 \times info[‘rh\_range’] \times 1e^{-9} / \sqrt{info[‘rh\_epsr’]}}$$</li></ul><figure id="figure2"><br>  <img src="/Figure/Part1Fig/Fig2.png" width="600" height="auto" alt="About" style="display:block; margin:auto;" /><br>  <figcaption style="text-align:center;">Figure 2: Visualization of the Complete 2D Data Readed Using Python Code</figcaption><br></figure><p>Enclosed is the principal Python code utilized for reading DZT files.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># transform string to date</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dzt_headers_datetime</span>(<span class="params">date_bytes</span>):</span><br><span class="line">    binary_array = <span class="built_in">format</span>(struct.unpack(<span class="string">&quot;=I&quot;</span>, date_bytes)[<span class="number">0</span>], <span class="string">&quot;b&quot;</span>).zfill(<span class="number">32</span>)[::-<span class="number">1</span>]</span><br><span class="line">    sec2=<span class="built_in">int</span>(binary_array[<span class="number">0</span>:<span class="number">5</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 5-bits 00-04  0-29 (second/2)</span></span><br><span class="line">    minutes=<span class="built_in">int</span>(binary_array[<span class="number">5</span>:<span class="number">11</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 6-bits 05-10  0-59</span></span><br><span class="line">    hour=<span class="built_in">int</span>(binary_array[<span class="number">11</span>:<span class="number">16</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 5-bits 11-15  0-23</span></span><br><span class="line">    day=<span class="built_in">int</span>(binary_array[<span class="number">16</span>:<span class="number">21</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 5-bits 16-20  1-31</span></span><br><span class="line">    month=<span class="built_in">int</span>(binary_array[<span class="number">21</span>:<span class="number">25</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 4-bits 21-24  1-12, 1=Jan, 2=Feb, etc.</span></span><br><span class="line">    year=<span class="built_in">int</span>(binary_array[<span class="number">25</span>:<span class="number">32</span>][::-<span class="number">1</span>], base=<span class="number">2</span>)  <span class="comment"># 7-bits 25-31  0-127 (0-127 = 1980-2107)</span></span><br><span class="line">    value_range_pairs=((sec2,(<span class="number">0</span>,<span class="number">30</span>)),(minutes,(<span class="number">0</span>,<span class="number">60</span>)),(hour,(<span class="number">0</span>,<span class="number">24</span>)),(day, (<span class="number">1</span>,<span class="number">32</span>)),(month,(<span class="number">1</span>,<span class="number">13</span>)),(year,(<span class="number">0</span>,<span class="number">128</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">all</span>((v &gt;= lb) &amp; (v &lt; ub) <span class="keyword">for</span> v, (lb, ub) <span class="keyword">in</span> value_range_pairs):</span><br><span class="line">        <span class="keyword">return</span> datetime.datetime(<span class="number">1980</span> + year, month, day, hour, minutes, sec2 * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%s-%s-%s %s:%s:%s&#x27;</span>%(year+<span class="number">1980</span>,month,day,hour,minutes,sec2*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># readGSSI</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readGSSI</span>(<span class="params">file_name</span>):    </span><br><span class="line">    <span class="comment"># H is unsigned int 16 (ushort = uint16)</span></span><br><span class="line">    <span class="comment"># h is short (int16)</span></span><br><span class="line">    <span class="comment"># I is unsigned int 32 (uint = uint32)</span></span><br><span class="line">    <span class="comment"># i is int32</span></span><br><span class="line">    <span class="comment"># f is float</span></span><br><span class="line">    <span class="comment"># c is char</span></span><br><span class="line">    <span class="comment"># s is char[]</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename=file_name+<span class="string">&#x27;.dzt&#x27;</span></span><br><span class="line">        info=&#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fid:</span><br><span class="line">            minheadsize=<span class="number">1024</span></span><br><span class="line">            header=fid.read(minheadsize)</span><br><span class="line">            DZT_HEADER_STRUCT=<span class="string">&#x27;=4Hh5fH4s4s7H3f18s2H4hcc14sH12sh896s&#x27;</span></span><br><span class="line">            (info[<span class="string">&#x27;rh_tag&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_data&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nsamp&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_bits&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_zero&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_sps&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_spm&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_mpm&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_position&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_range&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_npass&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_create&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_modif&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_rgain&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nrgain&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_text&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_ntext&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_proc&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nproc&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nchan&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_epsr&#x27;</span>],  </span><br><span class="line">             info[<span class="string">&#x27;rh_top&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_depth&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_reserved&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_spp&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_linemun&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_start_x&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_start_y&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_end_x&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_end_y&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_lineorder&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_dtype&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_antname&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_chanmask&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_name&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_chksum&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_variable&#x27;</span>])=struct.unpack(DZT_HEADER_STRUCT,header)</span><br><span class="line">            info[<span class="string">&#x27;rh_tag_bits&#x27;</span>]=<span class="built_in">hex</span>(info[<span class="string">&#x27;rh_tag&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_tag_bytes&#x27;</span>]=struct.pack(<span class="string">&quot;H&quot;</span>,info[<span class="string">&#x27;rh_tag&#x27;</span>]).decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_create_time&#x27;</span>]=dzt_headers_datetime(info[<span class="string">&#x27;rh_create&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_modif_time&#x27;</span>]=dzt_headers_datetime(info[<span class="string">&#x27;rh_modif&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_reserved&#x27;</span>]=info[<span class="string">&#x27;rh_reserved&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_lineorder&#x27;</span>]=info[<span class="string">&#x27;rh_lineorder&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_dtype&#x27;</span>]=info[<span class="string">&#x27;rh_dtype&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_antname&#x27;</span>]=info[<span class="string">&#x27;rh_antname&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_name&#x27;</span>]=info[<span class="string">&#x27;rh_name&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_variable&#x27;</span>]=info[<span class="string">&#x27;rh_variable&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> info[<span class="string">&#x27;rh_data&#x27;</span>]!=<span class="number">1024</span>:</span><br><span class="line">                fid.read(minheadsize*(info[<span class="string">&#x27;rh_data&#x27;</span>]-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fid.read(minheadsize*(info[<span class="string">&#x27;rh_nchan&#x27;</span>]-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">8</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;uint8&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">16</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;uint16&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">32</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;int32&#x27;</span></span><br><span class="line">            data=np.fromfile(fid,dtype=datatype)</span><br><span class="line">            nsample=info[<span class="string">&#x27;rh_nsamp&#x27;</span>]</span><br><span class="line">            nscan=data.size//nsample</span><br><span class="line">            data=data.reshape((nscan,nsample)).transpose()</span><br><span class="line">            data[:<span class="number">2</span>,:]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        filename=file_name+<span class="string">&#x27;.DZT&#x27;</span></span><br><span class="line">        info=&#123;&#125;</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fid:</span><br><span class="line">            minheadsize=<span class="number">1024</span></span><br><span class="line">            header=fid.read(minheadsize)</span><br><span class="line">            DZT_HEADER_STRUCT=<span class="string">&#x27;=4Hh5fH4s4s7H3f18s2H4hcc14sH12sh896s&#x27;</span></span><br><span class="line">            (info[<span class="string">&#x27;rh_tag&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_data&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nsamp&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_bits&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_zero&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_sps&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_spm&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_mpm&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_position&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_range&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_npass&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_create&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_modif&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_rgain&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nrgain&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_text&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_ntext&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_proc&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nproc&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_nchan&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_epsr&#x27;</span>],  </span><br><span class="line">             info[<span class="string">&#x27;rh_top&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_depth&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_reserved&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_spp&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_linemun&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_start_x&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_start_y&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_end_x&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_end_y&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_lineorder&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_dtype&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_antname&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_chanmask&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_name&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_chksum&#x27;</span>],</span><br><span class="line">             info[<span class="string">&#x27;rh_variable&#x27;</span>])=struct.unpack(DZT_HEADER_STRUCT,header)</span><br><span class="line">            info[<span class="string">&#x27;rh_tag_bits&#x27;</span>]=<span class="built_in">hex</span>(info[<span class="string">&#x27;rh_tag&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_tag_bytes&#x27;</span>]=struct.pack(<span class="string">&quot;H&quot;</span>,info[<span class="string">&#x27;rh_tag&#x27;</span>]).decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_create_time&#x27;</span>]=dzt_headers_datetime(info[<span class="string">&#x27;rh_create&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_modif_time&#x27;</span>]=dzt_headers_datetime(info[<span class="string">&#x27;rh_modif&#x27;</span>])</span><br><span class="line">            info[<span class="string">&#x27;rh_reserved&#x27;</span>]=info[<span class="string">&#x27;rh_reserved&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_lineorder&#x27;</span>]=info[<span class="string">&#x27;rh_lineorder&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_dtype&#x27;</span>]=info[<span class="string">&#x27;rh_dtype&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_antname&#x27;</span>]=info[<span class="string">&#x27;rh_antname&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_name&#x27;</span>]=info[<span class="string">&#x27;rh_name&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            info[<span class="string">&#x27;rh_variable&#x27;</span>]=info[<span class="string">&#x27;rh_variable&#x27;</span>].decode(<span class="string">&#x27;ascii&#x27;</span>,<span class="string">&#x27;ignore&#x27;</span>).replace(<span class="string">&quot;\x00&quot;</span>, <span class="string">&quot; &quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> info[<span class="string">&#x27;rh_data&#x27;</span>]!=<span class="number">1024</span>:</span><br><span class="line">                fid.read(minheadsize*(info[<span class="string">&#x27;rh_data&#x27;</span>]-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fid.read(minheadsize*(info[<span class="string">&#x27;rh_nchan&#x27;</span>]-<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">8</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;uint8&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">16</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;uint16&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">32</span>:</span><br><span class="line">                datatype=<span class="string">&#x27;int32&#x27;</span></span><br><span class="line">            data=np.fromfile(fid,dtype=datatype)</span><br><span class="line">            nsample=info[<span class="string">&#x27;rh_nsamp&#x27;</span>]</span><br><span class="line">            nscan=data.size//nsample</span><br><span class="line">            data=data.reshape((nscan,nsample)).transpose()</span><br><span class="line">            data[:<span class="number">2</span>,:]=<span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> data,info</span><br></pre></td></tr></table></figure><h3 id="Data-Writting"><a href="#Data-Writting" class="headerlink" title="Data Writting"></a>Data Writting</h3><p>By simply reversing the data reading process, we can facilitate the writing of the data. It is crucial to note that data intended for writing must be converted from a float fromat to an integer format. Additionally, the data type must correspond to the value specified by ‘info[‘rh_bits’]’. The core code patch for this operation is as follows:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># writeGSSI</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">writeGSSI</span>(<span class="params">filename,data_input,info</span>):    </span><br><span class="line">    <span class="comment"># H is unsigned int 16 (ushort = uint16)</span></span><br><span class="line">    <span class="comment"># h is short (int16)</span></span><br><span class="line">    <span class="comment"># I is unsigned int 32 (uint = uint32)</span></span><br><span class="line">    <span class="comment"># i is int32</span></span><br><span class="line">    <span class="comment"># f is float</span></span><br><span class="line">    <span class="comment"># c is char</span></span><br><span class="line">    <span class="comment"># s is char[]</span></span><br><span class="line">    filename=filename+<span class="string">&#x27;.DZT&#x27;</span></span><br><span class="line">    info[<span class="string">&#x27;rh_create&#x27;</span>]=info[<span class="string">&#x27;rh_create&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_modif&#x27;</span>]=info[<span class="string">&#x27;rh_modif&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_reserved&#x27;</span>]=info[<span class="string">&#x27;rh_reserved&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_lineorder&#x27;</span>]=info[<span class="string">&#x27;rh_lineorder&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_dtype&#x27;</span>]=info[<span class="string">&#x27;rh_dtype&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_antname&#x27;</span>]=info[<span class="string">&#x27;rh_antname&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_name&#x27;</span>]=info[<span class="string">&#x27;rh_name&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line">    info[<span class="string">&#x27;rh_variable&#x27;</span>]=info[<span class="string">&#x27;rh_variable&#x27;</span>].encode(<span class="string">&#x27;ascii&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fid:</span><br><span class="line">        ...</span><br><span class="line">        fid.write(head)</span><br><span class="line">        ...</span><br><span class="line">        fid.seek(minheadsize*(info[<span class="string">&#x27;rh_data&#x27;</span>]),<span class="number">0</span>) </span><br><span class="line">        <span class="comment"># fid.write(bytes(minheadsize*(info[&#x27;rh_data&#x27;]-1)))</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(nscan):</span><br><span class="line">            <span class="keyword">for</span> data_idx <span class="keyword">in</span> <span class="built_in">range</span>(nsample):</span><br><span class="line">                <span class="keyword">if</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">16</span>:</span><br><span class="line">                    data=struct.pack(<span class="string">&#x27;H&#x27;</span>,data_input[idx*nsample+data_idx])</span><br><span class="line">                    fid.write(data)</span><br><span class="line">                <span class="keyword">elif</span> info[<span class="string">&#x27;rh_bits&#x27;</span>]==<span class="number">32</span>:</span><br><span class="line">                    data=struct.pack(<span class="string">&#x27;i&#x27;</span>,data_input[idx*nsample+data_idx])</span><br><span class="line">                    fid.write(data)</span><br></pre></td></tr></table></figure><h2 id="Dataset"><a href="#Dataset" class="headerlink" title="Dataset"></a>Dataset</h2><p>Ultimately, we are pleased to showcase a selection of our GPR datasets, amassing over 500 sets in total, meticulously gathered using GSSI radar system. This extensive dataset is available for download from our <a href="https://t.me/Nephilim_GPR">Telegram channel</a>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Understanding-GPR-File-Formats-Part-1-A-Comprehensive-Guide-to-GSSI-Data-Reading-and-Writing-Methods&quot;&gt;&lt;a href=&quot;#Understanding-GPR-Fi</summary>
      
    
    
    
    <category term="Algorithm" scheme="http://example.com/categories/Algorithm/"/>
    
    
    <category term="GPR Data" scheme="http://example.com/tags/GPR-Data/"/>
    
  </entry>
  
</feed>
